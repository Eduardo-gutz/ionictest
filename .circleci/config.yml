version: 2.1

orbs:
  node: circleci/node@5.1.0

jobs:
  build-and-test:
    docker:
      - image: cimg/node:20.19
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Instalar Ionic CLI
          command: sudo npm install -g @ionic/cli
      - run:
          name: Build de la aplicación web
          command: ionic build --prod
      - persist_to_workspace:
          root: .
          paths:
            - .

  android:
    docker:
      - image: cimg/android:2025.01.1-browsers
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Instalar dependencias
          command: npm install
      - run:
          name: Instalar Ionic y Capacitor
          command: |
            sudo npm install -g @ionic/cli
            sudo npm install @capacitor/core @capacitor/cli
      - run:
          name: Sincronizar Capacitor
          command: npx cap sync android
      - run:
          name: Decodificar keystore
          command: |
            echo $ANDROID_KEYSTORE_BASE64 | base64 -d > android/app/my-release-key.keystore
      - run:
          name: Crear archivo de propiedades de firma
          command: |
            echo "storeFile=my-release-key.keystore" > android/keystore.properties
            echo "storePassword=$ANDROID_KEYSTORE_PASSWORD" >> android/keystore.properties
            echo "keyAlias=$ANDROID_KEY_ALIAS" >> android/keystore.properties
            echo "keyPassword=$ANDROID_KEY_PASSWORD" >> android/keystore.properties
      - run:
          name: Build APK/AAB
          command: |
            cd android
            chmod +x ./gradlew
            ./gradlew assembleRelease
            # Para AAB (Google Play): ./gradlew bundleRelease
      - store_artifacts:
          path: app-release-*.apk
          destination: apk/
      - store_artifacts:
          path: android/app/build/outputs/apk/release
          destination: apk/
      - persist_to_workspace:
          root: .
          paths:
            - android/app/build/outputs

  build-ios:
    macos:
      xcode: 15.4.0
    resource_class: macos.m1.medium.gen1
    steps:
      - attach_workspace:
          at: .
      # - run:
      #     name: Instalar Node.js
      #     command: |
      #       curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
      #       export NVM_DIR="$HOME/.nvm"
      #       [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
      #       nvm install 20.19.0
      #       nvm use 20.19.0
      - restore_cache:
          keys:
            - v1-npm-{{ checksum "package-lock.json" }}
            - v1-npm-
      - run:
          name: Instalar dependencias
          command: |
            brew install node@20

            # Limpiar node_modules del workspace anterior
            rm -rf node_modules
            
            # Intentar npm ci, si falla usar npm install
            npm ci --legacy-peer-deps || npm install --legacy-peer-deps
      - save_cache:
          key: v1-npm-{{ checksum "package-lock.json" }}
          paths:
            - node_modules
      - run:
          name: Instalar Ionic CLI
          command: |
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npm install -g @ionic/cli
      - run:
          name: Build de la aplicación web
          command: |
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            ionic build --prod
      - run:
          name: Sincronizar Capacitor
          command: |
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npx cap sync ios
      - restore_cache:
          keys:
            - v1-pods-{{ checksum "ios/App/Podfile.lock" }}
            - v1-pods-
      - run:
          name: Instalar CocoaPods
          command: |
            cd ios/App
            pod install
      - save_cache:
          key: v1-pods-{{ checksum "ios/App/Podfile.lock" }}
          paths:
            - ios/App/Pods
      - run:
          name: Configurar certificados
          command: |
            # Decodificar certificados
            echo $IOS_CERTIFICATE_BASE64 | base64 -d > certificate.p12
            echo $IOS_PROFILE_BASE64 | base64 -d > profile.mobileprovision
            
            # Crear y configurar keychain
            security create-keychain -p "" build.keychain
            security import certificate.p12 -k build.keychain -P $IOS_CERTIFICATE_PASSWORD -A -T /usr/bin/codesign
            security list-keychains -s build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p "" build.keychain
            security set-keychain-settings -t 3600 -u build.keychain
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" build.keychain
            
            # Instalar provisioning profile
            UUID=$(grep UUID -A1 -a profile.mobileprovision | grep -io "[-A-F0-9]\{36\}")
            mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
            cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
            
            # Verificar instalación
            security find-identity -v -p codesigning
            echo "Provisioning profile UUID: $UUID"
      - run:
          name: Crear exportOptions.plist
          command: |
              cat > ios/App/exportOptions.plist \<<EOF
              <?xml version="1.0" encoding="UTF-8"?>
              <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
              <plist version="1.0">
              <dict>
                  <key>method</key>
                  <string>app-store</string>
                  <key>teamID</key>
                  <string>${IOS_TEAM_ID}</string>
                  <key>uploadSymbols</key>
                  <true/>
                  <key>compileBitcode</key>
                  <false/>
                  <key>signingStyle</key>
                  <string>manual</string>
                  <key>stripSwiftSymbols</key>
                  <true/>
              </dict>
              </plist>
              EOF
      - run:
          name: Build iOS
          command: |
            cd ios/App
            
            # Limpiar builds anteriores
            xcodebuild clean -workspace App.xcworkspace -scheme App -configuration Release
            
            # Crear archive
            xcodebuild -workspace App.xcworkspace \
              -scheme App \
              -configuration Release \
              -archivePath App.xcarchive \
              -sdk iphoneos \
              -destination 'generic/platform=iOS' \
              CODE_SIGN_STYLE=Manual \
              DEVELOPMENT_TEAM=$IOS_TEAM_ID \
              archive | xcpretty
            
            # Exportar IPA
            xcodebuild -exportArchive \
              -archivePath App.xcarchive \
              -exportOptionsPlist exportOptions.plist \
              -exportPath ./build \
              -allowProvisioningUpdates
      - store_artifacts:
          path: ios/App/build
          destination: ios-build/

workflows:
  build-and-deploy:
    jobs:
      - build-and-test
      # - build-android:
      #     requires:
      #       - build-and-test
      #     filters:
      #       branches:
      #         only: 
      #           - main
      #           - develop
      - build-ios:
          requires:
            - build-and-test
          filters:
            branches:
              only: 
                - main
                - develop